# handlers/commands.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import os # –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from keyboards.reply import registration_start_keyboard, main_keyboard
from keyboards.inline import gender_selection_keyboard, data_input_method_inline_keyboard 
from states.registration_states import RegistrationStates, AnalysisStates 
from utils.file_helpers import load_user_data_from_json, PERSON_DATA_DIR 
from config import bot 

router = Router()

async def safe_delete_message(chat_id: int, message_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except TelegramBadRequest:
        pass

async def perform_reregistration(message_or_callback: types.Message | types.CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user_id = message_or_callback.from_user.id
    
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    user_profile_path = PERSON_DATA_DIR / str(user_id) / "profile.json"
    delete_feedback_message = ""
    if user_profile_path.exists():
        try:
            user_profile_path.unlink() # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è
            delete_feedback_message = "–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.\n"
            print(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id {user_id} —É–¥–∞–ª–µ–Ω.")
        except OSError as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id {user_id}: {e}")
            delete_feedback_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.\n"
    else:
        delete_feedback_message = "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n" # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–µ –±—ã–ª–æ

    start_message_text = (
        f"{delete_feedback_message}"
        "üåü –Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–±–æ—Ç—ã –æ –≤–∞—à–µ–º –∑–¥–æ—Ä–æ–≤—å–µ! üåü\n"
        "üîç –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —Å —Ü–µ–ª—å—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é.\n"
        "üìä –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —è –º–æ–≥—É:\n"
        "‚ö†Ô∏è –í—ã—è–≤–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã\n"
        "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞\n"
        "ü•ó –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–∏–º —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.\n"
        "‚ÑπÔ∏è –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –æ–±—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞ üë®‚Äç‚öïÔ∏èüë©‚Äç‚öïÔ∏è.\n"
        "üíô –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —É—Ö–æ–¥–µ –∑–∞ —Å–æ–±–æ–π!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(start_message_text, reply_markup=registration_start_keyboard())
    elif isinstance(message_or_callback, types.CallbackQuery):
        await bot.send_message(chat_id=user_id, text=start_message_text, reply_markup=registration_start_keyboard())
        if message_or_callback.message: # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∫–æ–ª–±—ç–∫
             await safe_delete_message(message_or_callback.message.chat.id, message_or_callback.message.message_id)
             
    await state.set_state(RegistrationStates.waiting_for_registration_start)


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = load_user_data_from_json(user_id)
    is_registered = user_data is not None
    current_fsm_state = await state.get_state() 
    if current_fsm_state is not None:
        await state.clear() 

    if is_registered:
        reg_data = user_data.get("registration_data", {})
        first_name_to_greet = reg_data.get("first_name") or user_data.get("first_name") or message.from_user.first_name
        
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name_to_greet}!\n"
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=main_keyboard() 
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await perform_reregistration(message, state)


@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.clear()
    user_data = load_user_data_from_json(message.from_user.id)
    reply_markup_after_cancel = main_keyboard() if user_data else registration_start_keyboard()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=reply_markup_after_cancel
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π, –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start\\.\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∞–Ω–∞–ª–∏–∑—ã \\(PDF –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É\\) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\\.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start \\- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\\.\n"
        "/cancel \\- –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–æ–≤\\)\\.\n"
        "/reregister –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Å–±—Ä–æ—Å)' \\- –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\\."
    )
    await message.answer(help_text, parse_mode="MarkdownV2")


@router.message(F.text == "üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã")
async def choose_analysis_input_method(message: types.Message, state: FSMContext):
    user_data = load_user_data_from_json(message.from_user.id)
    if not user_data:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start.",
            reply_markup=registration_start_keyboard()
            )
        # await state.set_state(RegistrationStates.waiting_for_registration_start) # –ù–µ –Ω—É–∂–Ω–æ, cmd_start —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç
        return # cmd_start –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    current_fsm_state = await state.get_state()
    if current_fsm_state is not None and not current_fsm_state.startswith("AnalysisStates:"):
        await state.clear() # –û—á–∏—â–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∞–ª–∏–∑–∞

    await message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–æ–≤?",
        reply_markup=data_input_method_inline_keyboard()
    )
    await state.set_state(AnalysisStates.waiting_input_method)


@router.message(Command("reregister"))
async def cmd_reregister(message: types.Message, state: FSMContext):
    await perform_reregistration(message, state)

@router.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Å–±—Ä–æ—Å)")
async def handle_reregister_button(message: types.Message, state: FSMContext):
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –î–∞/–ù–µ—Ç
    # builder = InlineKeyboardBuilder()
    # builder.button(text="–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="confirm_reregister_yes")
    # builder.button(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="confirm_reregister_no")
    # await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ?", 
    #                      reply_markup=builder.as_markup())
    # await state.set_state(SomeStateForReregisterConfirm) # –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π —Å–±—Ä–æ—Å:
    await message.reply("–í—ã–ø–æ–ª–Ω—è—é —Å–±—Ä–æ—Å –∏ –Ω–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ...")
    await perform_reregistration(message, state)

# –ü—Ä–∏–º–µ—Ä –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "‚öôÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_my_profile_button(message: types.Message, state: FSMContext):
    user_data = load_user_data_from_json(message.from_user.id)
    if not user_data:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=registration_start_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_registration_start)
        return

    reg_data = user_data.get("registration_data", {})
    profile_info = [f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**"]
    profile_info.append(f"ID: `{message.from_user.id}`")
    if message.from_user.username:
        profile_info.append(f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}")
    
    profile_info.append(f"\nüìã **–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:**")
    gender_map = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}
    profile_info.append(f"–ü–æ–ª: {gender_map.get(reg_data.get('gender'), '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    profile_info.append(f"–í–æ–∑—Ä–∞—Å—Ç: {reg_data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç")
    profile_info.append(f"–í–µ—Å: {reg_data.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –∫–≥")
    profile_info.append(f"–†–æ—Å—Ç: {reg_data.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω')} —Å–º")

    med_hist_list = reg_data.get('medical_history_list', [])
    med_hist_text = reg_data.get('medical_history_text', '')
    chronic_text = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    combined_hist = []
    if med_hist_list and "none" not in med_hist_list: combined_hist.extend(med_hist_list)
    if med_hist_text and med_hist_text.lower() not in ["–Ω–µ—Ç", "", "none"]: combined_hist.append(med_hist_text)
    if combined_hist: chronic_text = "; ".join(combined_hist)
    elif "none" in med_hist_list: chronic_text = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    profile_info.append(f"–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {chronic_text}")

    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫, –¥–∏–µ—Ç—ã, —Å–Ω–∞) ...

    profile_info.append(f"\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (—Å–±—Ä–æ—Å)' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /reregister.")

    await message.answer("\n".join(profile_info), parse_mode="Markdown")