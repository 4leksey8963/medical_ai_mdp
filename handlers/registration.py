# handlers/registration.py
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from states.registration_states import RegistrationStates, AnalysisStates 
from keyboards.inline import (
    gender_selection_keyboard, # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    medical_history_keyboard, habits_keyboard,
    diet_features_keyboard, skip_keyboard,
    data_input_method_inline_keyboard 
)
from utils.file_helpers import save_user_data_to_json
from config import bot

router = Router()

async def safe_delete_message(chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except TelegramBadRequest:
        pass

@router.message(RegistrationStates.waiting_for_registration_start, F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def process_registration_start_button(message: types.Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.", reply_markup=types.ReplyKeyboardRemove())
    inline_keyboard_msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=gender_selection_keyboard() 
    )
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(RegistrationStates.waiting_for_gender, F.data.startswith("gender_"))
async def process_gender_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    gender = callback.data.split("_")[1]
    await state.update_data(gender=gender)
    if callback.message:
        await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    new_question_msg = await callback.message.answer(
        f"–í–∞—à –ø–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}.\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):"
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_age)

@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    if not message.text or not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30).")
        await safe_delete_message(message.chat.id, message.message_id)
        return
    age = int(message.text)
    if not (5 <= age <= 120):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 5 –¥–æ 120 –ª–µ—Ç).")
        await safe_delete_message(message.chat.id, message.message_id)
        return
    if last_bot_msg_id:
        await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(age=age)
    new_question_msg = await message.answer(
        f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç.\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70 –∏–ª–∏ 70.5):"
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_weight)

@router.message(RegistrationStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    try:
        weight_str = message.text.replace(',', '.')
        weight = float(weight_str)
        if not (20 <= weight <= 300): raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70 –∏–ª–∏ 70.5).")
        await safe_delete_message(message.chat.id, message.message_id)
        return
    if last_bot_msg_id:
        await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(weight=weight)
    new_question_msg = await message.answer(
        f"–í–∞—à –≤–µ—Å: {weight} –∫–≥.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):"
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_height)

@router.message(RegistrationStates.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    if not message.text or not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175).")
        await safe_delete_message(message.chat.id, message.message_id)
        return
    height = int(message.text)
    if not (100 <= height <= 250):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).")
        await safe_delete_message(message.chat.id, message.message_id)
        return
    if last_bot_msg_id:
        await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(height=height)
    new_question_msg = await message.answer(
        f"–í–∞—à —Ä–æ—Å—Ç: {height} —Å–º.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é (—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏). "
        "–ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
        reply_markup=medical_history_keyboard()
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_medical_history)

@router.callback_query(RegistrationStates.waiting_for_medical_history, F.data.startswith("med_hist_"))
async def process_medical_history_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    choice = callback.data.replace("med_hist_", "")
    if callback.message:
        await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    if choice == "skip_other":
        new_question_msg = await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç."
        )
        await state.update_data(last_bot_message_id=new_question_msg.message_id)
    else:
        user_data_state = await state.get_data()
        current_history = user_data_state.get("medical_history_list", [])
        if choice == "none":
            current_history = ["none"]
        elif choice not in current_history:
             current_history.append(choice)
             if "none" in current_history: current_history.remove("none") 

        await state.update_data(medical_history_list=current_history)
        
        selected_text_display = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        if current_history == ["none"]:
            selected_text_display = "–Ω–µ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"
        elif current_history:
            selected_text_display = ", ".join(current_history) 
        
        new_question_msg = await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–µ–¥. –∏—Å—Ç–æ—Ä–∏—è: {selected_text_display}.\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.",
            reply_markup=skip_keyboard("next_to_habits")
        )
        await state.update_data(last_bot_message_id=new_question_msg.message_id)

@router.message(RegistrationStates.waiting_for_medical_history)
async def process_medical_history_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    if last_bot_msg_id:
        await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(medical_history_text=message.text) 
    new_question_msg = await message.answer(
        f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω—è—Ç–∞: {message.text}.\n"
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∫—É—Ä–µ–Ω–∏–µ, –∞–ª–∫–æ–≥–æ–ª—å)?",
        reply_markup=habits_keyboard()
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_habits)

@router.callback_query(RegistrationStates.waiting_for_medical_history, F.data == "next_to_habits")
async def process_next_to_habits(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.message:
        await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    new_question_msg = await callback.message.answer(
        "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–∫—É—Ä–µ–Ω–∏–µ, –∞–ª–∫–æ–≥–æ–ª—å)?",
        reply_markup=habits_keyboard()
    )
    await state.update_data(last_bot_message_id=new_question_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_habits)

@router.callback_query(RegistrationStates.waiting_for_habits, F.data.startswith("habit_"))
async def process_habits_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    choice = callback.data.replace("habit_", "")
    if callback.message: await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    if choice == "skip_other":
        new_msg = await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        await state.update_data(last_bot_message_id=new_msg.message_id)
    else:
        user_data_state = await state.get_data()
        current_habits = user_data_state.get("habits_list", [])
        if choice == "none":
            current_habits = ["none"]
        elif choice not in current_habits:
            current_habits.append(choice)
            if "none" in current_habits: current_habits.remove("none")
        await state.update_data(habits_list=current_habits)
        selected_text = ("–Ω–µ—Ç" if "none" in current_habits else (", ".join(current_habits) if current_habits else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"))
        new_msg = await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {selected_text}.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.", reply_markup=skip_keyboard("next_to_diet"))
        await state.update_data(last_bot_message_id=new_msg.message_id)

@router.message(RegistrationStates.waiting_for_habits)
async def process_habits_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    if last_bot_msg_id: await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(habits_text=message.text)
    new_msg = await message.answer(f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {message.text}.\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Ü–∏–æ–Ω–∞?", reply_markup=diet_features_keyboard())
    await state.update_data(last_bot_message_id=new_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_diet_features)

@router.callback_query(RegistrationStates.waiting_for_habits, F.data == "next_to_diet")
async def process_next_to_diet(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.message: await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    new_msg = await callback.message.answer("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Ü–∏–æ–Ω–∞?", reply_markup=diet_features_keyboard())
    await state.update_data(last_bot_message_id=new_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_diet_features)

@router.callback_query(RegistrationStates.waiting_for_diet_features, F.data.startswith("diet_"))
async def process_diet_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    choice = callback.data.replace("diet_", "")
    if callback.message: await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    if choice == "skip_other":
        new_msg = await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        await state.update_data(last_bot_message_id=new_msg.message_id)
    else:
        user_data_state = await state.get_data()
        current_diet = user_data_state.get("diet_list", [])
        if choice == "none":
            current_diet = ["none"]
        elif choice not in current_diet:
            current_diet.append(choice)
            if "none" in current_diet: current_diet.remove("none")
        await state.update_data(diet_list=current_diet)
        selected_text = ("–æ–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ" if "none" in current_diet else (", ".join(current_diet) if current_diet else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"))
        new_msg = await callback.message.answer(
            f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Ü–∏–æ–Ω–∞: {selected_text}.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.", reply_markup=skip_keyboard("next_to_sleep"))
        await state.update_data(last_bot_message_id=new_msg.message_id)

@router.message(RegistrationStates.waiting_for_diet_features)
async def process_diet_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    last_bot_msg_id = user_data.get("last_bot_message_id")
    if last_bot_msg_id: await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(diet_text=message.text)
    new_msg = await message.answer(f"–†–∞—Ü–∏–æ–Ω: {message.text}.\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º —Å–Ω–∞:")
    await state.update_data(last_bot_message_id=new_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_sleep_pattern)

@router.callback_query(RegistrationStates.waiting_for_diet_features, F.data == "next_to_sleep")
async def process_next_to_sleep(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.message: await safe_delete_message(callback.message.chat.id, callback.message.message_id)
    new_msg = await callback.message.answer("–†–∞—Ü–∏–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–∂–∏–º —Å–Ω–∞:")
    await state.update_data(last_bot_message_id=new_msg.message_id)
    await state.set_state(RegistrationStates.waiting_for_sleep_pattern)

@router.message(RegistrationStates.waiting_for_sleep_pattern)
async def process_sleep_pattern(message: types.Message, state: FSMContext):
    user_data_from_state = await state.get_data()
    last_bot_msg_id = user_data_from_state.get("last_bot_message_id")
    if last_bot_msg_id:
        await safe_delete_message(message.chat.id, last_bot_msg_id)
    await safe_delete_message(message.chat.id, message.message_id)
    await state.update_data(sleep_pattern=message.text)
    
    final_user_data = await state.get_data()
    final_user_data.pop("last_bot_message_id", None) # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–ª–µ
    
    user_profile_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registration_data": final_user_data
    }
    
    save_status_message = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã." if save_user_data_to_json(message.from_user, user_profile_data) else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    await state.clear() 

    summary_text = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n{save_status_message}\n\n"
    # summary_text += "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:" # –£–±—Ä–∞–ª –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

    await message.answer(summary_text, reply_markup=types.ReplyKeyboardRemove()) 
    await message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–æ–≤?", 
        reply_markup=data_input_method_inline_keyboard()
    )
    await state.set_state(AnalysisStates.waiting_input_method)