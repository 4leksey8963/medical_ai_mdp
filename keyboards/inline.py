# keyboards/inline.py
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
import pathlib 
import os

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –¥–ª—è WebApp ---
# –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ form.html –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
# –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ inline.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ /keyboards, –∞ form.html –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
try:
    current_file_path = pathlib.Path(__file__).resolve()
    project_root = current_file_path.parent.parent 
    form_html_path = project_root / "form.html"
except NameError: 
    project_root = pathlib.Path(os.getcwd())
    form_html_path = project_root / "form.html"

# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ URL –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô HTTPS URL –° GITHUB PAGES –ò–õ–ò –î–†–£–ì–û–ì–û –•–û–°–¢–ò–ù–ì–ê
# –ï–°–õ–ò –í–´ –†–ï–®–ò–¢–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –•–û–°–¢–ò–ù–ì –í–ú–ï–°–¢–û –õ–û–ö–ê–õ–¨–ù–û–ì–û –§–ê–ô–õ–ê
# –ü—Ä–∏–º–µ—Ä –¥–ª—è GitHub Pages: "https://yourusername.github.io/your-repo-name/form.html"
# –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é –≤–∞—à URL, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ form.html —Ç–∞–º –µ—Å—Ç—å
HOSTED_FORM_URL = "https://tolmachevski.github.io/form.html" 

FORM_WEBAPP_URL = HOSTED_FORM_URL 

print(f"INFO: URL –¥–ª—è WebApp —Ñ–æ—Ä–º—ã: {FORM_WEBAPP_URL}")

def data_input_method_inline_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (PDF –∏–ª–∏ WebApp —Ñ–æ—Ä–º–∞)."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF", callback_data="input_method_pdf")
    builder.button(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–Ω–ª–∞–π–Ω", web_app=WebAppInfo(url=FORM_WEBAPP_URL))
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis_input")
    builder.adjust(1)
    return builder.as_markup()

def confirm_analysis_data_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="confirm_data_correct")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_data_edit_manual") 
    builder.button(text="üîÑ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data="force_reload_data_source") 
    builder.adjust(2,1) 
    return builder.as_markup()

def after_edit_prompt_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="resend_editable_text")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)", callback_data="cancel_edit_and_return")
    builder.adjust(1)
    return builder.as_markup()

def after_llm_result_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –æ—Ç LLM."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data="analyze_new_data")
    builder.button(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å / –ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="reregister_profile")
    builder.adjust(1)
    return builder.as_markup()

def gender_selection_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üöπ –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")
    builder.button(text="üö∫ –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
    builder.adjust(2)
    return builder.as_markup()

def medical_history_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    diseases = {
        "diabetes": "–î–∏–∞–±–µ—Ç", "hypertension": "–ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è",
        "thyroid_disorders": "–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã",
        "anemia": "–ê–Ω–µ–º–∏—è", "none": "–ù–µ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π"
    }
    for code, name in diseases.items():
        builder.button(text=name, callback_data=f"med_hist_{code}")
    builder.button(text="‚û°Ô∏è –î—Ä—É–≥–æ–µ / –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data="med_hist_skip_other")
    builder.adjust(1)
    return builder.as_markup()

def habits_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    habits_options = {
        "smoking": "üö¨ –ö—É—Ä–µ–Ω–∏–µ", "alcohol": "üç∑ –ê–ª–∫–æ–≥–æ–ª—å (—Ä–µ–≥—É–ª—è—Ä–Ω–æ)",
        "none": "‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    }
    for code, name in habits_options.items():
        builder.button(text=name, callback_data=f"habit_{code}")
    builder.button(text="‚û°Ô∏è –î—Ä—É–≥–æ–µ / –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data="habit_skip_other")
    builder.adjust(1)
    return builder.as_markup()

def diet_features_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    diet_options = {
        "vegetarian": "ü•¶ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ", "vegan": "ü•ï –í–µ–≥–∞–Ω—Å—Ç–≤–æ", "keto": "ü•© –ö–µ—Ç–æ-–¥–∏–µ—Ç–∞",
        "gluten_free": "üö´ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "lactose_free": "ü•õ –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã",
        "none": "üçΩÔ∏è –û–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"
    }
    for code, name in diet_options.items():
        builder.button(text=name, callback_data=f"diet_{code}")
    builder.button(text="‚û°Ô∏è –î—Ä—É–≥–æ–µ / –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data="diet_skip_other")
    builder.adjust(1)
    return builder.as_markup()

def skip_keyboard(next_step_callback_data: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=next_step_callback_data)
    return builder.as_markup()

def cancel_action_keyboard(callback_data: str = "cancel_current_action") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=callback_data)
    return builder.as_markup()